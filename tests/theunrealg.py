# -*- coding: utf-8 -*-
"""TheUnrealG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lEPnrS5alBbkSAm6L1K9sJO5Qd0bsU8e
"""

#GST Reconciliation Agent Using DONUT
!pip install transformers
!pip install torch torchvision
!pip install datasets
!pip install Pillow
!pip install matplotlib
!pip install pandas
!pip install numpy
!pip install opencv-python
!pip install reportlab
!pip install faker
!pip install timm
!pip install sentencepiece
!pip install accelerate

import torch
import torch.nn as nn
from transformers import (
    DonutProcessor,
    VisionEncoderDecoderModel,
    VisionEncoderDecoderConfig,
    AutoTokenizer,
    TrainingArguments,
    Trainer
)
from PIL import Image, ImageDraw, ImageFont
import pandas as pd
import numpy as np
import json
import random
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import cv2
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from faker import Faker
import os
from datasets import Dataset
from torch.utils.data import DataLoader
import warnings
warnings.filterwarnings('ignore')

"""Generator"""

import subprocess
import sys

def install_packages():
    packages = [
        'Pillow',
        'faker'
    ]

    for package in packages:
        print(f"Installing {package}...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])

    print("All packages installed successfully!")

install_packages()


import random
import os
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
from faker import Faker

class SyntheticInvoiceGenerator:
    def __init__(self):
        self.fake = Faker('en_IN')  # Indian locale for realistic data
        self.gst_rates = [0, 5, 12, 18, 28]  # Common GST rates in India

        # Product categories with typical descriptions
        self.product_categories = {
            'Electronics': ['Laptop', 'Mobile Phone', 'Television', 'Camera', 'Headphones', 'Tablet', 'Speaker', 'Monitor'],
            'Clothing': ['Shirt', 'Jeans', 'Dress', 'Jacket', 'T-Shirt', 'Saree', 'Kurta', 'Trousers'],
            'Food': ['Rice', 'Wheat', 'Sugar', 'Oil', 'Spices', 'Pulses', 'Tea', 'Coffee'],
            'Furniture': ['Chair', 'Table', 'Sofa', 'Bed', 'Wardrobe', 'Desk', 'Cabinet', 'Bookshelf'],
            'Cosmetics': ['Lipstick', 'Foundation', 'Shampoo', 'Cream', 'Perfume', 'Lotion', 'Soap', 'Face Wash'],
            'Automobile': ['Car', 'Bike', 'Scooter', 'Spare Parts', 'Tyres', 'Battery', 'Engine Oil', 'Accessories'],
            'Books': ['Novel', 'Textbook', 'Magazine', 'Journal', 'Dictionary', 'Comics', 'Biography', 'Manual'],
            'Sports': ['Cricket Bat', 'Football', 'Tennis Racket', 'Basketball', 'Badminton Set', 'Gym Equipment', 'Sports Shoes']
        }

    def generate_company_data(self):
        """Generate realistic company information"""
        return {
            'name': self.fake.company(),
            'address': self.fake.address(),
            'gstin': self.generate_gstin(),
            'email': self.fake.email(),
            'phone': self.fake.phone_number()
        }

    def generate_gstin(self):
        """Generate realistic GSTIN format"""
        state_code = random.randint(1, 37)
        pan = ''.join(random.choices('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789', k=10))
        entity_code = random.choice(['1', '2', '4'])
        check_digit = random.choice('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
        return f"{state_code:02d}{pan}{entity_code}Z{check_digit}"

    def generate_invoice_items(self, num_items=None):
        """Generate invoice line items"""
        if num_items is None:
            num_items = random.randint(1, 8)

        items = []

        for _ in range(num_items):
            category = random.choice(list(self.product_categories.keys()))
            product = random.choice(self.product_categories[category])

            brands = ['Premium', 'Standard', 'Deluxe', 'Basic', 'Pro', 'Elite', 'Classic', 'Modern']
            description = f"{random.choice(brands)} {product}"

            gst_rate = random.choice(self.gst_rates)

            if category in ['Electronics', 'Automobile']:
                quantity = random.randint(1, 3)
                rate = round(random.uniform(5000, 50000), 2)
            elif category in ['Food']:
                quantity = random.randint(10, 100)
                rate = round(random.uniform(50, 200), 2)
            elif category in ['Clothing', 'Cosmetics']:
                quantity = random.randint(5, 50)
                rate = round(random.uniform(200, 2000), 2)
            elif category in ['Books']:
                quantity = random.randint(1, 10)
                rate = round(random.uniform(100, 800), 2)
            else:
                quantity = random.randint(1, 20)
                rate = round(random.uniform(100, 5000), 2)

            base_amount = round(quantity * rate, 2)
            gst_amount = round(base_amount * gst_rate / 100, 2)

            item = {
                'description': description,
                'category': category,
                'quantity': quantity,
                'rate': rate,
                'amount': base_amount,
                'gst_rate': gst_rate,
                'gst_amount': gst_amount,
                'total_amount': base_amount + gst_amount,
                'unit': self.get_unit_for_category(category)
            }
            items.append(item)

        return items

    def get_unit_for_category(self, category):
        """Get appropriate unit of measurement for category"""
        unit_mapping = {
            'Electronics': random.choice(['PCS', 'NOS', 'SET']),
            'Clothing': random.choice(['PCS', 'NOS']),
            'Food': random.choice(['KG', 'LTR', 'PCS', 'Quintal']),
            'Furniture': random.choice(['PCS', 'NOS', 'SET']),
            'Cosmetics': random.choice(['PCS', 'ML', 'GM']),
            'Automobile': random.choice(['NOS', 'PCS']),
            'Books': random.choice(['PCS', 'NOS']),
            'Sports': random.choice(['PCS', 'NOS', 'SET'])
        }
        return unit_mapping.get(category, 'PCS')

    def introduce_discrepancies(self, original_items, discrepancy_probability=0.3):
        """Introduce minimal discrepancies in items for buyer/seller mismatch scenarios"""
        modified_items = []

        for item in original_items:
            new_item = item.copy()

            # Randomly introduce discrepancies
            if random.random() < discrepancy_probability:
                discrepancy_type = random.choice(['quantity', 'rate', 'gst_rate', 'description'])

                if discrepancy_type == 'quantity':
                    # Small quantity difference (±1-2 units)
                    variance = random.randint(-2, 2)
                    new_item['quantity'] = max(1, item['quantity'] + variance)

                elif discrepancy_type == 'rate':
                    # Small rate difference (±5%)
                    variance = random.uniform(-0.05, 0.05)
                    new_item['rate'] = round(item['rate'] * (1 + variance), 2)

                elif discrepancy_type == 'gst_rate':
                    # Different GST rate (common mistake)
                    available_rates = [rate for rate in self.gst_rates if rate != item['gst_rate']]
                    if available_rates:
                        new_item['gst_rate'] = random.choice(available_rates)

                elif discrepancy_type == 'description':
                    # Minor description change
                    brands = ['Premium', 'Standard', 'Deluxe', 'Basic', 'Pro', 'Elite', 'Classic', 'Modern']
                    product_name = item['description'].split(' ', 1)[1] if ' ' in item['description'] else item['description']
                    new_item['description'] = f"{random.choice(brands)} {product_name}"

                # Recalculate amounts based on changes
                new_item['amount'] = round(new_item['quantity'] * new_item['rate'], 2)
                new_item['gst_amount'] = round(new_item['amount'] * new_item['gst_rate'] / 100, 2)
                new_item['total_amount'] = new_item['amount'] + new_item['gst_amount']

            modified_items.append(new_item)

        return modified_items

    def generate_paired_invoices(self):
        """Generate a pair of invoices - one for buyer, one for seller with same transaction"""
        # Generate base data
        supplier = self.generate_company_data()
        buyer = self.generate_company_data()
        items = self.generate_invoice_items()

        # Generate base invoice number and date
        base_invoice_num = random.randint(1000, 9999)
        invoice_date = self.fake.date_between(start_date='-1y', end_date='today')

        # Calculate totals for original items
        subtotal = sum(item['amount'] for item in items)
        total_gst = sum(item['gst_amount'] for item in items)
        grand_total = subtotal + total_gst

        # Create seller invoice (original data)
        seller_invoice = {
            'invoice_number': f"SELL-{base_invoice_num}",
            'invoice_date': invoice_date.strftime('%d/%m/%Y'),
            'supplier': supplier,
            'buyer': buyer,
            'items': items,
            'subtotal': round(subtotal, 2),
            'total_gst': round(total_gst, 2),
            'grand_total': round(grand_total, 2),
            'invoice_type': 'SELLER_INVOICE'
        }

        # Create buyer invoice with potential discrepancies
        buyer_items = self.introduce_discrepancies(items, discrepancy_probability=0.4)

        # Recalculate totals for buyer items
        buyer_subtotal = sum(item['amount'] for item in buyer_items)
        buyer_total_gst = sum(item['gst_amount'] for item in buyer_items)
        buyer_grand_total = buyer_subtotal + buyer_total_gst

        buyer_invoice = {
            'invoice_number': f"BUY-{base_invoice_num}",
            'invoice_date': invoice_date.strftime('%d/%m/%Y'),
            'supplier': supplier,
            'buyer': buyer,
            'items': buyer_items,
            'subtotal': round(buyer_subtotal, 2),
            'total_gst': round(buyer_total_gst, 2),
            'grand_total': round(buyer_grand_total, 2),
            'invoice_type': 'BUYER_INVOICE'
        }

        return seller_invoice, buyer_invoice

class InvoiceImageGenerator:
    def __init__(self, width=800, height=1200):
        self.width = width
        self.height = height

    def create_invoice_image(self, invoice_data):
        """Create a synthetic invoice image"""
        img = Image.new('RGB', (self.width, self.height), 'white')
        draw = ImageDraw.Draw(img)

        try:
            title_font = ImageFont.load_default()
            header_font = ImageFont.load_default()
            normal_font = ImageFont.load_default()
        except:
            title_font = ImageFont.load_default()
            header_font = ImageFont.load_default()
            normal_font = ImageFont.load_default()

        y_pos = 30

        # Title with invoice type
        title_color = 'blue' if invoice_data['invoice_type'] == 'SELLER_INVOICE' else 'green'
        draw.text((50, y_pos), f"GST INVOICE - {invoice_data['invoice_type']}", fill=title_color, font=title_font)
        y_pos += 40

        # Invoice details
        draw.text((50, y_pos), f"Invoice No : {invoice_data['invoice_number']}", fill='black', font=header_font)
        draw.text((400, y_pos), f"Date : {invoice_data['invoice_date']}", fill='black', font=header_font)
        y_pos += 30

        # Supplier info
        draw.text((50, y_pos), "Supplier Details :", fill='black', font=header_font)
        y_pos += 20
        draw.text((50, y_pos), invoice_data['supplier']['name'], fill='black', font=normal_font)
        y_pos += 15
        draw.text((50, y_pos), f"GSTIN : {invoice_data['supplier']['gstin']}", fill='black', font=normal_font)
        y_pos += 15
        # Truncate address for display
        address_lines = invoice_data['supplier']['address'].split('\n')[:2]
        for line in address_lines:
            draw.text((50, y_pos), line[:50], fill='black', font=normal_font)
            y_pos += 15

        y_pos += 20

        # Buyer info
        draw.text((50, y_pos), "Buyer Details :", fill='black', font=header_font)
        y_pos += 20
        draw.text((50, y_pos), invoice_data['buyer']['name'], fill='black', font=normal_font)
        y_pos += 15
        draw.text((50, y_pos), f"GSTIN : {invoice_data['buyer']['gstin']}", fill='black', font=normal_font)
        y_pos += 30

        # Items header
        draw.text((50, y_pos), "Description", fill='black', font=header_font)
        draw.text((250, y_pos), "Qty", fill='black', font=header_font)
        draw.text((290, y_pos), "Unit", fill='black', font=header_font)
        draw.text((330, y_pos), "Rate", fill='black', font=header_font)
        draw.text((390, y_pos), "Amount", fill='black', font=header_font)
        draw.text((460, y_pos), "GST%", fill='black', font=header_font)
        draw.text((500, y_pos), "GST Amt", fill='black', font=header_font)
        draw.text((570, y_pos), "Total", fill='black', font=header_font)
        y_pos += 25

        # Draw line
        draw.line([(50, y_pos), (650, y_pos)], fill='black', width=1)
        y_pos += 10

        # Items
        for item in invoice_data['items']:
            desc = item['description'][:25] + "..." if len(item['description']) > 25 else item['description']
            draw.text((50, y_pos), desc, fill='black', font=normal_font)
            draw.text((250, y_pos), str(item['quantity']), fill='black', font=normal_font)
            draw.text((290, y_pos), item['unit'], fill='black', font=normal_font)
            draw.text((330, y_pos), str(item['rate']), fill='black', font=normal_font)
            draw.text((390, y_pos), str(item['amount']), fill='black', font=normal_font)
            draw.text((460, y_pos), f"{item['gst_rate']}%", fill='black', font=normal_font)
            draw.text((500, y_pos), str(item['gst_amount']), fill='black', font=normal_font)
            draw.text((570, y_pos), str(item['total_amount']), fill='black', font=normal_font)
            y_pos += 20

        y_pos += 20

        # Totals
        draw.line([(330, y_pos), (650, y_pos)], fill='black', width=1)
        y_pos += 10
        draw.text((430, y_pos), f"Subtotal: Rs. {invoice_data['subtotal']}", fill='black', font=normal_font)
        y_pos += 20
        draw.text((430, y_pos), f"Total GST: Rs. {invoice_data['total_gst']}", fill='black', font=normal_font)
        y_pos += 20
        draw.text((430, y_pos), f"Grand Total: Rs. {invoice_data['grand_total']}", fill='black', font=header_font)

        return img

def generate_paired_invoice_samples(num_pairs=5):
    """Generate paired invoices (buyer and seller) for training"""
    generator = SyntheticInvoiceGenerator()
    image_generator = InvoiceImageGenerator()

    # Create directories
    os.makedirs('seller_invoices', exist_ok=True)
    os.makedirs('buyer_invoices', exist_ok=True)

    print(f"Generating {num_pairs} pairs of invoices (seller + buyer)...")

    for i in range(num_pairs):
        print(f"Generating invoice pair {i+1}/{num_pairs}")

        # Generate paired invoices
        seller_invoice, buyer_invoice = generator.generate_paired_invoices()

        # Create seller invoice image
        seller_image = image_generator.create_invoice_image(seller_invoice)
        seller_filename = f"seller_invoices/seller_invoice_{i+1}.png"
        seller_image.save(seller_filename)

        # Create buyer invoice image
        buyer_image = image_generator.create_invoice_image(buyer_invoice)
        buyer_filename = f"buyer_invoices/buyer_invoice_{i+1}.png"
        buyer_image.save(buyer_filename)

        print(f"✅ Saved pair: {seller_filename} and {buyer_filename}")

        # Print summary of discrepancies for this pair
        print(f"   📊 Seller total: Rs.{seller_invoice['grand_total']}")
        print(f"   📊 Buyer total: Rs.{buyer_invoice['grand_total']}")
        difference = abs(seller_invoice['grand_total'] - buyer_invoice['grand_total'])
        if difference > 0:
            print(f"   ⚠️  Amount difference: Rs.{difference}")
        else:
            print(f"   ✅ Perfect match")

    print("\n🎉 All invoice pairs generated successfully!")
    print("📁 Check 'seller_invoices' folder for seller invoice images")
    print("📁 Check 'buyer_invoices' folder for buyer invoice images")

    # List generated files
    print("\n📋 Generated files:")
    if os.path.exists('seller_invoices'):
        for file in sorted(os.listdir('seller_invoices')):
            print(f"  📄 seller_invoices/{file}")
    if os.path.exists('buyer_invoices'):
        for file in sorted(os.listdir('buyer_invoices')):
            print(f"  📄 buyer_invoices/{file}")

# Run the generator
print("🚀 Starting Paired Invoice Generator...")
generate_paired_invoice_samples(3)  # Change this number to generate more pairs

try:
    from IPython.display import Image as IPImage, display
    print("\n🖼️ Displaying first generated invoice pair:")
    print("Seller Invoice:")
    display(IPImage('seller_invoices/seller_invoice_1.png'))
    print("Buyer Invoice:")
    display(IPImage('buyer_invoices/buyer_invoice_1.png'))
except:
    print("Note: Could not display image preview, but files are generated successfully!")

print("\n✨ Paired invoice generation complete! You can download the files from the file browser on the left.")

# GST Reconciliation System - Match/Mismatch Detection with HTML Report

import pandas as pd
from decimal import Decimal, ROUND_HALF_UP
from datetime import datetime
import re
import os

class GSTReconciliationEngine:
    def __init__(self, tolerance=0.01):
        """
        Initialize GST reconciliation engine
        tolerance: Acceptable difference for amount matching (default 0.01 = 1 paisa)
        """
        self.tolerance = tolerance
        self.match_results = []

    def validate_gstin(self, gstin):
        """Validate GSTIN format"""
        if not gstin or len(gstin) != 15:
            return False

        pattern = r'^[0-9]{2}[A-Z0-9]{10}[0-9][A-Z][0-9A-Z]$'
        return bool(re.match(pattern, gstin))

    def calculate_gst_amounts(self, base_amount, gst_rate):
        """Calculate GST amounts with proper rounding"""
        base_amount = Decimal(str(base_amount))
        gst_rate = Decimal(str(gst_rate))

        gst_amount = (base_amount * gst_rate / 100).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
        total_amount = base_amount + gst_amount

        return {
            'base_amount': float(base_amount),
            'gst_amount': float(gst_amount),
            'total_amount': float(total_amount)
        }

    def compare_invoices(self, invoice1_data, invoice2_data, comparison_type="buyer_seller"):
        """
        Compare two invoices for GST reconciliation
        comparison_type: "buyer_seller" (sales vs purchase) or "system_vs_ocr" (system vs extracted)
        """
        result = {
            'comparison_id': f"CMP_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'comparison_type': comparison_type,
            'invoice1': invoice1_data,
            'invoice2': invoice2_data,
            'matches': {},
            'mismatches': {},
            'gst_calculations': {},
            'overall_status': 'UNKNOWN',
            'confidence_score': 0.0,
            'summary': {}
        }

        # Basic field comparisons
        self._compare_basic_fields(invoice1_data, invoice2_data, result)

        # GST-specific comparisons
        self._compare_gst_details(invoice1_data, invoice2_data, result)

        # Amount reconciliation
        self._reconcile_amounts(invoice1_data, invoice2_data, result)

        # Calculate overall status
        self._calculate_overall_status(result)

        # Generate summary
        self._generate_summary(result)

        return result

    def _compare_basic_fields(self, inv1, inv2, result):
        """Compare basic invoice fields"""
        basic_fields = ['invoice_number', 'invoice_date', 'supplier_gstin', 'buyer_gstin']

        for field in basic_fields:
            val1 = str(inv1.get(field, '')).strip().upper()
            val2 = str(inv2.get(field, '')).strip().upper()

            if val1 == val2:
                result['matches'][field] = {'value': val1, 'status': 'MATCH'}
            else:
                result['mismatches'][field] = {
                    'invoice1': val1,
                    'invoice2': val2,
                    'status': 'MISMATCH'
                }

    def _compare_gst_details(self, inv1, inv2, result):
        """Compare GST-specific details"""
        # GSTIN validation
        gstin_fields = ['supplier_gstin', 'buyer_gstin']
        for field in gstin_fields:
            gstin1 = inv1.get(field, '')
            gstin2 = inv2.get(field, '')

            result['gst_calculations'][f'{field}_validation'] = {
                'invoice1_valid': self.validate_gstin(gstin1),
                'invoice2_valid': self.validate_gstin(gstin2),
                'gstin1': gstin1,
                'gstin2': gstin2
            }

    def _reconcile_amounts(self, inv1, inv2, result):
        """Reconcile invoice amounts"""
        amount_fields = ['subtotal', 'total_gst', 'grand_total']

        for field in amount_fields:
            amt1 = float(inv1.get(field, 0))
            amt2 = float(inv2.get(field, 0))
            difference = abs(amt1 - amt2)

            if difference <= self.tolerance:
                result['matches'][field] = {
                    'invoice1': amt1,
                    'invoice2': amt2,
                    'difference': difference,
                    'status': 'MATCH'
                }
            else:
                result['mismatches'][field] = {
                    'invoice1': amt1,
                    'invoice2': amt2,
                    'difference': difference,
                    'percentage_diff': (difference / max(amt1, amt2)) * 100 if max(amt1, amt2) > 0 else 0,
                    'status': 'MISMATCH'
                }

        # Item-level reconciliation if items are available
        if 'items' in inv1 and 'items' in inv2:
            self._reconcile_line_items(inv1['items'], inv2['items'], result)

    def _reconcile_line_items(self, items1, items2, result):
        """Reconcile individual line items"""
        result['item_reconciliation'] = {
            'total_items_inv1': len(items1),
            'total_items_inv2': len(items2),
            'item_matches': [],
            'item_mismatches': [],
            'unmatched_items': []
        }

        # Simple matching by description (can be enhanced)
        matched_items = []

        for i, item1 in enumerate(items1):
            best_match = None
            best_score = 0

            for j, item2 in enumerate(items2):
                if j in matched_items:
                    continue

                # Simple similarity check
                desc1 = str(item1.get('description', '')).lower()
                desc2 = str(item2.get('description', '')).lower()

                if desc1 == desc2:
                    score = 1.0
                elif desc1 in desc2 or desc2 in desc1:
                    score = 0.8
                else:
                    score = 0.0

                if score > best_score:
                    best_score = score
                    best_match = (j, item2)

            if best_match and best_score >= 0.8:
                matched_items.append(best_match[0])
                item_comparison = self._compare_single_item(item1, best_match[1])
                result['item_reconciliation']['item_matches'].append({
                    'item1_index': i,
                    'item2_index': best_match[0],
                    'comparison': item_comparison
                })
            else:
                result['item_reconciliation']['unmatched_items'].append({
                    'source': 'invoice1',
                    'index': i,
                    'item': item1
                })

        # Add unmatched items from invoice2
        for j, item2 in enumerate(items2):
            if j not in matched_items:
                result['item_reconciliation']['unmatched_items'].append({
                    'source': 'invoice2',
                    'index': j,
                    'item': item2
                })

    def _compare_single_item(self, item1, item2):
        """Compare individual items"""
        comparison = {'matches': {}, 'mismatches': {}}

        fields_to_compare = ['quantity', 'rate', 'amount', 'gst_rate', 'gst_amount', 'total_amount']

        for field in fields_to_compare:
            val1 = float(item1.get(field, 0))
            val2 = float(item2.get(field, 0))
            diff = abs(val1 - val2)

            if diff <= self.tolerance:
                comparison['matches'][field] = {'value1': val1, 'value2': val2, 'difference': diff}
            else:
                comparison['mismatches'][field] = {'value1': val1, 'value2': val2, 'difference': diff}

        return comparison

    def _calculate_overall_status(self, result):
        """Calculate overall reconciliation status"""
        total_checks = len(result['matches']) + len(result['mismatches'])
        if total_checks == 0:
            result['overall_status'] = 'NO_DATA'
            result['confidence_score'] = 0.0
            return

        match_count = len(result['matches'])
        result['confidence_score'] = (match_count / total_checks) * 100

        if result['confidence_score'] >= 95:
            result['overall_status'] = 'PERFECT_MATCH'
        elif result['confidence_score'] >= 80:
            result['overall_status'] = 'GOOD_MATCH'
        elif result['confidence_score'] >= 60:
            result['overall_status'] = 'PARTIAL_MATCH'
        else:
            result['overall_status'] = 'POOR_MATCH'

    def _generate_summary(self, result):
        """Generate summary statistics"""
        result['summary'] = {
            'total_fields_compared': len(result['matches']) + len(result['mismatches']),
            'fields_matched': len(result['matches']),
            'fields_mismatched': len(result['mismatches']),
            'amount_differences': [],
            'critical_mismatches': []
        }

        # Collect amount differences
        for field, data in result['mismatches'].items():
            if 'difference' in data and isinstance(data['difference'], (int, float)):
                result['summary']['amount_differences'].append({
                    'field': field,
                    'difference': data['difference']
                })

        # Identify critical mismatches
        critical_fields = ['grand_total', 'supplier_gstin', 'buyer_gstin']
        for field in critical_fields:
            if field in result['mismatches']:
                result['summary']['critical_mismatches'].append(field)

    def get_html_template(self):
        """Return the HTML template for reconciliation report"""
        return '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GST Reconciliation Report</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }

        .header .subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .status-badge {
            display: inline-block;
            padding: 8px 20px;
            border-radius: 25px;
            font-weight: bold;
            font-size: 0.9rem;
            margin-top: 15px;
        }

        .status-perfect { background: #27ae60; color: white; }
        .status-good { background: #f39c12; color: white; }
        .status-partial { background: #e67e22; color: white; }
        .status-poor { background: #e74c3c; color: white; }

        .content {
            padding: 30px;
        }

        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .summary-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid #3498db;
            transition: transform 0.2s;
        }

        .summary-card:hover {
            transform: translateY(-2px);
        }

        .summary-card h3 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }

        .summary-card .value {
            font-size: 2rem;
            font-weight: bold;
            color: #3498db;
        }

        .section {
            margin-bottom: 30px;
        }

        .section h2 {
            color: #2c3e50;
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 10px;
            margin-bottom: 20px;
            font-size: 1.4rem;
        }

        .comparison-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .comparison-table th,
        .comparison-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ecf0f1;
        }

        .comparison-table th {
            background: #34495e;
            color: white;
            font-weight: 600;
        }

        .comparison-table tr:nth-child(even) {
            background: #f8f9fa;
        }

        .match {
            color: #27ae60;
            font-weight: bold;
        }

        .mismatch {
            color: #e74c3c;
            font-weight: bold;
        }

        .invoice-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .invoice-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border: 1px solid #ecf0f1;
        }

        .invoice-card h3 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .invoice-field {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #ecf0f1;
        }

        .invoice-field:last-child {
            border-bottom: none;
        }

        .field-label {
            font-weight: 600;
            color: #34495e;
        }

        .field-value {
            color: #2c3e50;
        }

        .footer {
            background: #ecf0f1;
            padding: 20px 30px;
            text-align: center;
            color: #7f8c8d;
            font-size: 0.9rem;
        }

        .progress-bar {
            width: 100%;
            height: 8px;
            background: #ecf0f1;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 10px;
        }

        .progress-fill {
            height: 100%;
            transition: width 0.5s ease;
        }

        .progress-perfect { background: #27ae60; }
        .progress-good { background: #f39c12; }
        .progress-partial { background: #e67e22; }
        .progress-poor { background: #e74c3c; }

        @media (max-width: 768px) {
            .invoice-details {
                grid-template-columns: 1fr;
            }

            .summary-grid {
                grid-template-columns: 1fr;
            }

            .comparison-table {
                font-size: 0.9rem;
            }

            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>GST Reconciliation Report</h1>
            <p class="subtitle">Comparison ID: {{COMPARISON_ID}}</p>
            <p class="subtitle">Generated on: {{GENERATED_DATE}}</p>
            <div class="status-badge status-{{STATUS_CLASS}}">
                {{OVERALL_STATUS}} ({{CONFIDENCE_SCORE}}% Match)
            </div>
            <div class="progress-bar">
                <div class="progress-fill progress-{{STATUS_CLASS}}" style="width: {{CONFIDENCE_SCORE}}%"></div>
            </div>
        </div>

        <div class="content">
            <div class="summary-grid">
                <div class="summary-card">
                    <h3>Total Fields Compared</h3>
                    <div class="value">{{TOTAL_FIELDS}}</div>
                </div>
                <div class="summary-card">
                    <h3>Fields Matched</h3>
                    <div class="value">{{FIELDS_MATCHED}}</div>
                </div>
                <div class="summary-card">
                    <h3>Fields Mismatched</h3>
                    <div class="value">{{FIELDS_MISMATCHED}}</div>
                </div>
                <div class="summary-card">
                    <h3>Comparison Type</h3>
                    <div class="value" style="font-size: 1.2rem;">{{COMPARISON_TYPE}}</div>
                </div>
            </div>

            <div class="invoice-details">
                <div class="invoice-card">
                    <h3>Invoice 1 Details</h3>
                    <div class="invoice-field">
                        <span class="field-label">Invoice Number:</span>
                        <span class="field-value">{{INV1_NUMBER}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Invoice Date:</span>
                        <span class="field-value">{{INV1_DATE}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Supplier GSTIN:</span>
                        <span class="field-value">{{INV1_SUPPLIER_GSTIN}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Buyer GSTIN:</span>
                        <span class="field-value">{{INV1_BUYER_GSTIN}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Grand Total:</span>
                        <span class="field-value">₹{{INV1_GRAND_TOTAL}}</span>
                    </div>
                </div>

                <div class="invoice-card">
                    <h3>Invoice 2 Details</h3>
                    <div class="invoice-field">
                        <span class="field-label">Invoice Number:</span>
                        <span class="field-value">{{INV2_NUMBER}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Invoice Date:</span>
                        <span class="field-value">{{INV2_DATE}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Supplier GSTIN:</span>
                        <span class="field-value">{{INV2_SUPPLIER_GSTIN}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Buyer GSTIN:</span>
                        <span class="field-value">{{INV2_BUYER_GSTIN}}</span>
                    </div>
                    <div class="invoice-field">
                        <span class="field-label">Grand Total:</span>
                        <span class="field-value">₹{{INV2_GRAND_TOTAL}}</span>
                    </div>
                </div>
            </div>

            <div class="section">
                <h2>Field-by-Field Comparison</h2>
                <table class="comparison-table">
                    <thead>
                        <tr>
                            <th>Field</th>
                            <th>Invoice 1</th>
                            <th>Invoice 2</th>
                            <th>Status</th>
                            <th>Difference</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{COMPARISON_ROWS}}
                    </tbody>
                </table>
            </div>

            {{ITEM_RECONCILIATION_SECTION}}

            <div class="section">
                <h2>GSTIN Validation</h2>
                <table class="comparison-table">
                    <thead>
                        <tr>
                            <th>GSTIN Type</th>
                            <th>Invoice 1 Valid</th>
                            <th>Invoice 2 Valid</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{GSTIN_VALIDATION_ROWS}}
                    </tbody>
                </table>
            </div>
        </div>

        <div class="footer">
            <p>This report was automatically generated by the GST Reconciliation System</p>
            <p>For support, contact your system administrator</p>
        </div>
    </div>
</body>
</html>
        '''

    def generate_reconciliation_report(self, comparison_result):
        """Generate HTML reconciliation report using the template"""
        html_template = self.get_html_template()

        # Determine status class for styling
        status_class_map = {
            'PERFECT_MATCH': 'perfect',
            'GOOD_MATCH': 'good',
            'PARTIAL_MATCH': 'partial',
            'POOR_MATCH': 'poor'
        }
        status_class = status_class_map.get(comparison_result['overall_status'], 'poor')

        # Generate comparison rows
        comparison_rows = ""

        # Add matches
        for field, data in comparison_result['matches'].items():
            if isinstance(data, dict) and 'value' in data:
                value = data['value']
                comparison_rows += f'''
                <tr>
                    <td>{field.replace('_', ' ').title()}</td>
                    <td>{value}</td>
                    <td>{value}</td>
                    <td><span class="match">MATCH</span></td>
                    <td>-</td>
                </tr>
                '''
            elif isinstance(data, dict) and 'invoice1' in data:
                comparison_rows += f'''
                <tr>
                    <td>{field.replace('_', ' ').title()}</td>
                    <td>₹{data['invoice1']}</td>
                    <td>₹{data['invoice2']}</td>
                    <td><span class="match">MATCH</span></td>
                    <td>₹{data.get('difference', 0)}</td>
                </tr>
                '''

        # Add mismatches
        for field, data in comparison_result['mismatches'].items():
            if isinstance(data, dict):
                inv1_val = data.get('invoice1', data.get('value1', ''))
                inv2_val = data.get('invoice2', data.get('value2', ''))
                difference = data.get('difference', '')

                # Format currency fields
                if 'total' in field.lower() or 'amount' in field.lower():
                    inv1_val = f"₹{inv1_val}" if inv1_val else inv1_val
                    inv2_val = f"₹{inv2_val}" if inv2_val else inv2_val
                    difference = f"₹{difference}" if difference else difference

                comparison_rows += f'''
                <tr>
                    <td>{field.replace('_', ' ').title()}</td>
                    <td>{inv1_val}</td>
                    <td>{inv2_val}</td>
                    <td><span class="mismatch">MISMATCH</span></td>
                    <td>{difference}</td>
                </tr>
                '''

        # Generate GSTIN validation rows
        gstin_validation_rows = ""
        for field, data in comparison_result['gst_calculations'].items():
            if 'validation' in field:
                gstin_type = field.replace('_validation', '').replace('_', ' ').title()
                inv1_valid = "✓ Valid" if data['invoice1_valid'] else "✗ Invalid"
                inv2_valid = "✓ Valid" if data['invoice2_valid'] else "✗ Invalid"
                status = "MATCH" if data['invoice1_valid'] == data['invoice2_valid'] else "MISMATCH"
                status_class_gstin = "match" if status == "MATCH" else "mismatch"

                gstin_validation_rows += f'''
                <tr>
                    <td>{gstin_type}</td>
                    <td>{inv1_valid}</td>
                    <td>{inv2_valid}</td>
                    <td><span class="{status_class_gstin}">{status}</span></td>
                </tr>
                '''

        # Generate item reconciliation section if available
        item_reconciliation_section = ""
        if 'item_reconciliation' in comparison_result:
            item_data = comparison_result['item_reconciliation']
            item_reconciliation_section = f'''
            <div class="section">
                <h2>Item-Level Reconciliation</h2>
                <div class="summary-grid">
                    <div class="summary-card">
                        <h3>Items in Invoice 1</h3>
                        <div class="value">{item_data['total_items_inv1']}</div>
                    </div>
                    <div class="summary-card">
                        <h3>Items in Invoice 2</h3>
                        <div class="value">{item_data['total_items_inv2']}</div>
                    </div>
                    <div class="summary-card">
                        <h3>Matched Items</h3>
                        <div class="value">{len(item_data['item_matches'])}</div>
                    </div>
                    <div class="summary-card">
                        <h3>Unmatched Items</h3>
                        <div class="value">{len(item_data['unmatched_items'])}</div>
                    </div>
                </div>
            </div>
            '''

        # Replace all template variables
        replacements = {
            '{{COMPARISON_ID}}': comparison_result['comparison_id'],
            '{{GENERATED_DATE}}': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            '{{OVERALL_STATUS}}': comparison_result['overall_status'].replace('_', ' '),
            '{{CONFIDENCE_SCORE}}': f"{comparison_result['confidence_score']:.1f}",
            '{{STATUS_CLASS}}': status_class,
            '{{TOTAL_FIELDS}}': str(comparison_result['summary']['total_fields_compared']),
            '{{FIELDS_MATCHED}}': str(comparison_result['summary']['fields_matched']),
            '{{FIELDS_MISMATCHED}}': str(comparison_result['summary']['fields_mismatched']),
            '{{COMPARISON_TYPE}}': comparison_result['comparison_type'].replace('_', ' ').title(),
            '{{INV1_NUMBER}}': str(comparison_result['invoice1'].get('invoice_number', 'N/A')),
            '{{INV1_DATE}}': str(comparison_result['invoice1'].get('invoice_date', 'N/A')),
            '{{INV1_SUPPLIER_GSTIN}}': str(comparison_result['invoice1'].get('supplier_gstin', 'N/A')),
            '{{INV1_BUYER_GSTIN}}': str(comparison_result['invoice1'].get('buyer_gstin', 'N/A')),
            '{{INV1_GRAND_TOTAL}}': str(comparison_result['invoice1'].get('grand_total', 'N/A')),
            '{{INV2_NUMBER}}': str(comparison_result['invoice2'].get('invoice_number', 'N/A')),
            '{{INV2_DATE}}': str(comparison_result['invoice2'].get('invoice_date', 'N/A')),
            '{{INV2_SUPPLIER_GSTIN}}': str(comparison_result['invoice2'].get('supplier_gstin', 'N/A')),
            '{{INV2_BUYER_GSTIN}}': str(comparison_result['invoice2'].get('buyer_gstin', 'N/A')),
            '{{INV2_GRAND_TOTAL}}': str(comparison_result['invoice2'].get('grand_total', 'N/A')),
            '{{COMPARISON_ROWS}}': comparison_rows,
            '{{GSTIN_VALIDATION_ROWS}}': gstin_validation_rows,
            '{{ITEM_RECONCILIATION_SECTION}}': item_reconciliation_section
        }

        # Apply replacements
        html_content = html_template
        for placeholder, value in replacements.items():
            html_content = html_content.replace(placeholder, str(value))
    def batch_reconcile(self, invoice_pairs):
        """
        Perform batch reconciliation for multiple invoice pairs
        invoice_pairs: List of tuples (invoice1_data, invoice2_data, comparison_type)
        """
        batch_results = []

        for i, (inv1, inv2, comp_type) in enumerate(invoice_pairs):
            try:
                result = self.compare_invoices(inv1, inv2, comp_type)
                result['batch_index'] = i
                batch_results.append(result)
            except Exception as e:
                batch_results.append({
                    'batch_index': i,
                    'error': str(e),
                    'overall_status': 'ERROR'
                })

        return batch_results

# Simple usage function - takes two invoices from your generator and produces HTML report
def reconcile_invoices(invoice1_data, invoice2_data, comparison_type="buyer_seller", tolerance=0.01):
    """
    Takes two invoices from your generator and reconciles them

    Args:
        invoice1_data: First invoice dictionary from your generator
        invoice2_data: Second invoice dictionary from your generator
        comparison_type: "buyer_seller" (default) or "system_vs_ocr"
        tolerance: Acceptable difference for amounts (default 0.01 = 1 paisa)

    Returns:
        Dictionary with comparison results and HTML report path
    """
    # Initialize reconciliation engine
    reconciler = GSTReconciliationEngine(tolerance=tolerance)

    # Compare the two invoices
    result = reconciler.compare_invoices(invoice1_data, invoice2_data, comparison_type)

    # Generate HTML report
    html_report = reconciler.generate_reconciliation_report(result)

    return {
        'comparison_result': result,
        'html_report_path': html_report['report_path'],
        'html_content': html_report['html_content'],
        'summary': {
            'status': result['overall_status'],
            'confidence': result['confidence_score'],
            'matches': result['summary']['fields_matched'],
            'mismatches': result['summary']['fields_mismatched'],
            'critical_mismatches': result['summary']['critical_mismatches']
        }
    }

def bulk_reconcile_invoices(invoice_pairs_list, tolerance=0.01):
    """
    Process multiple invoice pairs from your generator

    Args:
        invoice_pairs_list: List of tuples (invoice1, invoice2, comparison_type)
        tolerance: Acceptable difference for amounts

    Returns:
        List of reconciliation results with HTML reports
    """
    reconciler = GSTReconciliationEngine(tolerance=tolerance)
    results = []

    for invoice1, invoice2, comp_type in invoice_pairs_list:
        try:
            # Compare invoices
            result = reconciler.compare_invoices(invoice1, invoice2, comp_type)

            # Generate HTML report
            html_report = reconciler.generate_reconciliation_report(result)

            results.append({
                'comparison_result': result,
                'html_report_path': html_report['report_path'],
                'summary': {
                    'status': result['overall_status'],
                    'confidence': result['confidence_score'],
                    'matches': result['summary']['fields_matched'],
                    'mismatches': result['summary']['fields_mismatched']
                }
            })

        except Exception as e:
            results.append({
                'error': str(e),
                'status': 'ERROR'
            })

    return results

# Integration with your invoice generator
if __name__ == "__main__":
    """
    Example: How to use with your invoice generator
    """
    print("GST Reconciliation System Ready!")
    print("="*50)
    print("Usage with your invoice generator:")
    print("\n# Generate two invoices using your system")
    print("invoice1 = your_invoice_generator.generate_invoice(...)")
    print("invoice2 = your_invoice_generator.generate_invoice(...)")
    print("\n# Reconcile them")
    print("result = reconcile_invoices(invoice1, invoice2)")
    print("\n# Check results")
    print("print(f'Status: {result[\"summary\"][\"status\"]}')")
    print("print(f'Confidence: {result[\"summary\"][\"confidence\"]:.1f}%')")
    print("print(f'HTML Report: {result[\"html_report_path\"]}')")
    print("="*50)